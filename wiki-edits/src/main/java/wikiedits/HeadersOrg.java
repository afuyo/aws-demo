package wikiedits; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HeadersOrg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -862811418136638825L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Headers\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"operation\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\",\"REFRESH\"]}},{\"name\":\"changeSequence\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"streamPosition\",\"type\":\"string\"},{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"changeMask\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"columnMask\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"externalSchemaId\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public operation operation;
  @Deprecated public CharSequence changeSequence;
  @Deprecated public CharSequence timestamp;
  @Deprecated public CharSequence streamPosition;
  @Deprecated public CharSequence transactionId;
  @Deprecated public java.nio.ByteBuffer changeMask;
  @Deprecated public java.nio.ByteBuffer columnMask;
  @Deprecated public CharSequence externalSchemaId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HeadersOrg() {}

  /**
   * All-args constructor.
   * @param operation The new value for operation
   * @param changeSequence The new value for changeSequence
   * @param timestamp The new value for timestamp
   * @param streamPosition The new value for streamPosition
   * @param transactionId The new value for transactionId
   * @param changeMask The new value for changeMask
   * @param columnMask The new value for columnMask
   * @param externalSchemaId The new value for externalSchemaId
   */
  public HeadersOrg(operation operation, CharSequence changeSequence, CharSequence timestamp, CharSequence streamPosition, CharSequence transactionId, java.nio.ByteBuffer changeMask, java.nio.ByteBuffer columnMask, CharSequence externalSchemaId) {
    this.operation = operation;
    this.changeSequence = changeSequence;
    this.timestamp = timestamp;
    this.streamPosition = streamPosition;
    this.transactionId = transactionId;
    this.changeMask = changeMask;
    this.columnMask = columnMask;
    this.externalSchemaId = externalSchemaId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return changeSequence;
    case 2: return timestamp;
    case 3: return streamPosition;
    case 4: return transactionId;
    case 5: return changeMask;
    case 6: return columnMask;
    case 7: return externalSchemaId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: operation = (operation)value$; break;
    case 1: changeSequence = (CharSequence)value$; break;
    case 2: timestamp = (CharSequence)value$; break;
    case 3: streamPosition = (CharSequence)value$; break;
    case 4: transactionId = (CharSequence)value$; break;
    case 5: changeMask = (java.nio.ByteBuffer)value$; break;
    case 6: columnMask = (java.nio.ByteBuffer)value$; break;
    case 7: externalSchemaId = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public operation getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(operation value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'changeSequence' field.
   * @return The value of the 'changeSequence' field.
   */
  public CharSequence getChangeSequence() {
    return changeSequence;
  }

  /**
   * Sets the value of the 'changeSequence' field.
   * @param value the value to set.
   */
  public void setChangeSequence(CharSequence value) {
    this.changeSequence = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'streamPosition' field.
   * @return The value of the 'streamPosition' field.
   */
  public CharSequence getStreamPosition() {
    return streamPosition;
  }

  /**
   * Sets the value of the 'streamPosition' field.
   * @param value the value to set.
   */
  public void setStreamPosition(CharSequence value) {
    this.streamPosition = value;
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public CharSequence getTransactionId() {
    return transactionId;
  }

  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(CharSequence value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'changeMask' field.
   * @return The value of the 'changeMask' field.
   */
  public java.nio.ByteBuffer getChangeMask() {
    return changeMask;
  }

  /**
   * Sets the value of the 'changeMask' field.
   * @param value the value to set.
   */
  public void setChangeMask(java.nio.ByteBuffer value) {
    this.changeMask = value;
  }

  /**
   * Gets the value of the 'columnMask' field.
   * @return The value of the 'columnMask' field.
   */
  public java.nio.ByteBuffer getColumnMask() {
    return columnMask;
  }

  /**
   * Sets the value of the 'columnMask' field.
   * @param value the value to set.
   */
  public void setColumnMask(java.nio.ByteBuffer value) {
    this.columnMask = value;
  }

  /**
   * Gets the value of the 'externalSchemaId' field.
   * @return The value of the 'externalSchemaId' field.
   */
  public CharSequence getExternalSchemaId() {
    return externalSchemaId;
  }

  /**
   * Sets the value of the 'externalSchemaId' field.
   * @param value the value to set.
   */
  public void setExternalSchemaId(CharSequence value) {
    this.externalSchemaId = value;
  }

  /**
   * Creates a new Headers RecordBuilder.
   * @return A new Headers RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Headers RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Headers RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Headers RecordBuilder by copying an existing Headers instance.
   * @param other The existing instance to copy.
   * @return A new Headers RecordBuilder
   */
  public static Builder newBuilder(HeadersOrg other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Headers instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HeadersOrg>
    implements org.apache.avro.data.RecordBuilder<HeadersOrg> {

    private operation operation;
    private CharSequence changeSequence;
    private CharSequence timestamp;
    private CharSequence streamPosition;
    private CharSequence transactionId;
    private java.nio.ByteBuffer changeMask;
    private java.nio.ByteBuffer columnMask;
    private CharSequence externalSchemaId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeSequence)) {
        this.changeSequence = data().deepCopy(fields()[1].schema(), other.changeSequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamPosition)) {
        this.streamPosition = data().deepCopy(fields()[3].schema(), other.streamPosition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[4].schema(), other.transactionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.changeMask)) {
        this.changeMask = data().deepCopy(fields()[5].schema(), other.changeMask);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.columnMask)) {
        this.columnMask = data().deepCopy(fields()[6].schema(), other.columnMask);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.externalSchemaId)) {
        this.externalSchemaId = data().deepCopy(fields()[7].schema(), other.externalSchemaId);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Headers instance
     * @param other The existing instance to copy.
     */
    private Builder(HeadersOrg other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeSequence)) {
        this.changeSequence = data().deepCopy(fields()[1].schema(), other.changeSequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamPosition)) {
        this.streamPosition = data().deepCopy(fields()[3].schema(), other.streamPosition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[4].schema(), other.transactionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.changeMask)) {
        this.changeMask = data().deepCopy(fields()[5].schema(), other.changeMask);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.columnMask)) {
        this.columnMask = data().deepCopy(fields()[6].schema(), other.columnMask);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.externalSchemaId)) {
        this.externalSchemaId = data().deepCopy(fields()[7].schema(), other.externalSchemaId);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public operation getOperation() {
      return operation;
    }

    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public Builder setOperation(operation value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeSequence' field.
      * @return The value.
      */
    public CharSequence getChangeSequence() {
      return changeSequence;
    }

    /**
      * Sets the value of the 'changeSequence' field.
      * @param value The value of 'changeSequence'.
      * @return This builder.
      */
    public Builder setChangeSequence(CharSequence value) {
      validate(fields()[1], value);
      this.changeSequence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'changeSequence' field has been set.
      * @return True if the 'changeSequence' field has been set, false otherwise.
      */
    public boolean hasChangeSequence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'changeSequence' field.
      * @return This builder.
      */
    public Builder clearChangeSequence() {
      changeSequence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamPosition' field.
      * @return The value.
      */
    public CharSequence getStreamPosition() {
      return streamPosition;
    }

    /**
      * Sets the value of the 'streamPosition' field.
      * @param value The value of 'streamPosition'.
      * @return This builder.
      */
    public Builder setStreamPosition(CharSequence value) {
      validate(fields()[3], value);
      this.streamPosition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'streamPosition' field has been set.
      * @return True if the 'streamPosition' field has been set, false otherwise.
      */
    public boolean hasStreamPosition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'streamPosition' field.
      * @return This builder.
      */
    public Builder clearStreamPosition() {
      streamPosition = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public CharSequence getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public Builder setTransactionId(CharSequence value) {
      validate(fields()[4], value);
      this.transactionId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeMask' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getChangeMask() {
      return changeMask;
    }

    /**
      * Sets the value of the 'changeMask' field.
      * @param value The value of 'changeMask'.
      * @return This builder.
      */
    public Builder setChangeMask(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.changeMask = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'changeMask' field has been set.
      * @return True if the 'changeMask' field has been set, false otherwise.
      */
    public boolean hasChangeMask() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'changeMask' field.
      * @return This builder.
      */
    public Builder clearChangeMask() {
      changeMask = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'columnMask' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getColumnMask() {
      return columnMask;
    }

    /**
      * Sets the value of the 'columnMask' field.
      * @param value The value of 'columnMask'.
      * @return This builder.
      */
    public Builder setColumnMask(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.columnMask = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'columnMask' field has been set.
      * @return True if the 'columnMask' field has been set, false otherwise.
      */
    public boolean hasColumnMask() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'columnMask' field.
      * @return This builder.
      */
    public Builder clearColumnMask() {
      columnMask = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalSchemaId' field.
      * @return The value.
      */
    public CharSequence getExternalSchemaId() {
      return externalSchemaId;
    }

    /**
      * Sets the value of the 'externalSchemaId' field.
      * @param value The value of 'externalSchemaId'.
      * @return This builder.
      */
    public Builder setExternalSchemaId(CharSequence value) {
      validate(fields()[7], value);
      this.externalSchemaId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'externalSchemaId' field has been set.
      * @return True if the 'externalSchemaId' field has been set, false otherwise.
      */
    public boolean hasExternalSchemaId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'externalSchemaId' field.
      * @return This builder.
      */
    public Builder clearExternalSchemaId() {
      externalSchemaId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public HeadersOrg build() {
      try {
        HeadersOrg record = new HeadersOrg();
        record.operation = fieldSetFlags()[0] ? this.operation : (operation) defaultValue(fields()[0]);
        record.changeSequence = fieldSetFlags()[1] ? this.changeSequence : (CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (CharSequence) defaultValue(fields()[2]);
        record.streamPosition = fieldSetFlags()[3] ? this.streamPosition : (CharSequence) defaultValue(fields()[3]);
        record.transactionId = fieldSetFlags()[4] ? this.transactionId : (CharSequence) defaultValue(fields()[4]);
        record.changeMask = fieldSetFlags()[5] ? this.changeMask : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        record.columnMask = fieldSetFlags()[6] ? this.columnMask : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.externalSchemaId = fieldSetFlags()[7] ? this.externalSchemaId : (CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
